name: Release

# This workflow builds the wheels "on tag".
# If run from the hyperspy/rosettasciio repository, the wheels will be uploaded to pypi ;
# otherwise, the wheels will be available as a github artifact.
# Can also run on "workflow dispatch" to test building wheels
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.CIBW_ARCHS }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_ENVIRONMENT: POOCH_BASE_URL=https://github.com/${{ github.repository }}/raw/${{ github.ref_name }}/rsciio/tests/data/
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "ubuntu-latest"
            CIBW_ARCHS: "x86_64"
          - os: "ubuntu-24.04-arm"
            CIBW_ARCHS: "aarch64"
          - os: "windows-latest"
            CIBW_ARCHS: "AMD64"
          - os: "macos-13"
            CIBW_ARCHS: "x86_64"
          - os: "macos-14"
            CIBW_ARCHS: "arm64"

    steps:
      - uses: actions/checkout@v5

      - name: Build wheels for CPython
        uses: pypa/cibuildwheel@v3.1
        env:
          CIBW_ARCHS: ${{ matrix.CIBW_ARCHS }}
          CIBW_BUILD_FRONTEND: 'pip; args: --pre --extra-index-url "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple"'

      - name: List wheels
        run: |
          ls ./wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-${{ matrix.CIBW_ARCHS }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build SDist
        run: pipx run build --sdist

      - name: List SDist
        run: |
          ls ./dist

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-sdist
          path: dist/*.tar.gz

  pure_python_wheel:
    # Build pure python without C extention to be used by pyodide
    name: Make pure python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build pure python wheel
        run: DISABLE_C_EXTENTIONS=1 pipx run build --wheel

      - name: List SDist
        run: |
          ls ./dist

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-pure_python
          path: dist/*.whl

  upload_to_pypi:
    needs: [ build_wheels, make_sdist, pure_python_wheel ]
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v5
        with:
          pattern: artifacts-*
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R

      - uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.repository_owner == 'hyperspy' }}
        # See https://docs.pypi.org/trusted-publishers/using-a-publisher/

  create_release:
    # TODO: once we are happy with the workflow
    # setup zenodo to create a DOI automatically
    needs: upload_to_pypi
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836
